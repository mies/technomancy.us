{"timestamp":"Sat Oct 13 00:00:01 -0700 2007","title":"more rails testing help","id":63,"content":"<p>Hi, my name is Phil, and I suck at testing my views.<\/p>\n\n<p>You might argue that views aren't that crucial to functionality,\n  and that's not the job of the programmer--a designer will have to go\n  over them anyway. If you're on a team with a designer, it might not\n  be your job to make sure everything is displayed properly. However,\n  there is something pretty functionally crucial about the\n  views--forms. No amount of CSS and designer-fu will be able to fix a\n  form that doesn't ask the right questions.<\/p>\n\n<pre class='code'>\n  <span class=\"keyword\">def<\/span> <span class=\"function-name\">post_form_check<\/span>(action, params = <span class=\"variable-name\">nil<\/span>, session = <span class=\"variable-name\">nil<\/span>, flash = <span class=\"variable-name\">nil<\/span>)\n    get_action, action = action <span class=\"keyword\">if<\/span> action.is_a?(<span class=\"type\">Array<\/span>) \n    get (get_action || action), params.dup, session, flash\n    assert_response <span class=\"constant\">:success<\/span>\n\n    assert_form_elements_present(params)\n\n    post action, params, session, flash\n  <span class=\"keyword\">end<\/span>\n\n  <span class=\"keyword\">def<\/span> <span class=\"function-name\">assert_form_elements_present<\/span>(params, parents=[])\n    params.each <span class=\"keyword\">do<\/span> |id, value|\n      <span class=\"keyword\">next<\/span> <span class=\"keyword\">if<\/span> id.to_sym == <span class=\"constant\">:id<\/span>\n      <span class=\"keyword\">if<\/span> value.is_a? <span class=\"type\">Hash<\/span>\n        assert_form_elements_present(value, parents + [id])\n      <span class=\"keyword\">else<\/span>\n        assert_select <span class=\"string\">\"input#<\/span><span class=\"variable-name\">#{(parents + [id]).join('_')}<\/span><span class=\"string\">\"<\/span>\n      <span class=\"keyword\">end<\/span>\n    <span class=\"keyword\">end<\/span>\n  <span class=\"keyword\">end<\/span>\n<\/pre>\n\n<p>Generally when you have a page that people post data to, users get\n  a form from an action in the same controller--often even the same\n  action. So why not have Rails check that the form has the right\n  inputs anyway? You've already got a list of input parameters lined\n  up in a hash there just asking to be used.<\/p>\n\n<p><tt>post_form_check :new, { :name => 'Mead', :description => 'A\n    fermented beverage made of honey, water, and yeast, often served\n    mulled or with fruit', :alcoholic => true }<\/tt><\/p>\n\n<p>The above line will act as a <tt>post<\/tt>, on the <tt>:new<\/tt>\n  action of your controller, but will first <tt>get<\/tt> the same\n  action and ensure that there are <tt>&lt;input&gt;<\/tt> tags\n  named <tt>name<\/tt>, <tt>description<\/tt>,\n  and <tt>alcoholic<\/tt>. If you need to <tt>get<\/tt> a different\n  action than you are <tt>post<\/tt>ing to, you can use an array rather\n  than a symbol for the action:<\/p>\n\n<p><tt>post_form_check [:list, :drink], { :to_drink => 32 }<\/tt><\/p>\n\n<p>It still needs a bit of work to be able to support nested hashes,\n  but it should be helpful as it is.<\/p>\n\n<p><b>Update<\/b>: Now works with nested hashes.<\/p>\n\n<p><a href='http:\/\/www.chatmag.com\/news\/091606_rob_levin.html'>R.I.P lilo<\/a>.<\/p>\n"}
