--- 
timestamp: Wed 27 May 2009 17:35:46 PM PDT
title: in which are found tricks of the trade concerning clojure authorship
tags: "clojure emacs"
id: 126
content: |
  <p>So it turns out getting set up to write Clojure code can be a
    little tricky. The
    current <a href='http://bc.tech.coop/blog/081205.html'>first hit
    for a search on <code><clojure emacs</code></a> returns instructions
    that are out of date and more complicated than
    necessary. There are a lot of disconnected tidbits about how folks
    have figured out how to configure things, but it can be a bit
    tricky to tell the difference between, "hey, this is how I finally
    got it to work" and "this is how you really should be doing it". I
    figure I know about as much about using Clojure with Emacs as
    anybody, so here's a run-through of how I've done my setup. There
    are a lot of moving parts, but bear with me; most of the
    installation is automated.</p>

  <p><b>Spoiler Alert</b>: Using SLIME with Clojure is
    now <a href="/swank-clojure.html">much, much easier than the
    instructions detailed here indicate</a>. This page is left up as
    it provides some background that may be helpful.</p>

  <a name="pieces"></a>
  <h3>The Pieces</h3>

  <dl>
    <dt><a href='http://tromey.com/elpa'>ELPA</a></dt>
    <dd>The Emacs Lisp Package Archive functions as a centralized
      store for Emacs libraries and provides automated installation and
      upgrades.</dd>

    <dt><a href='http://github.com/jochu/clojure-mode'>clojure-mode</a></dt>
    <dd>This gets you syntax highlighting, indentation, and other basic
      goodies for editing .clj files.</dd>

    <dt><a href='http://common-lisp.net/project/slime/'>SLIME</a></dt>
    <dd>The Superior Lisp Interaction Mode for Emacs was originally
      written to support interacting with Common Lisp subprocesses from
      within Emacs, but it's been extended to work with other
      lisps.</dd>

    <dt><a href='http://github.com/jochu/swank-clojure'>swank-clojure</a></dt>
    <dd>An adapter for SLIME that allows it to work with Clojure.</dd>

    <dt><a href='http://github.com/jochu/clojure-mode'>clojure-test-mode</a></dt>
    <dd>This provides support for running Clojure tests from within
      Emacs buffers and seeing the results displayed inline.</dd>

    <dt><a href='http://mumble.net/~campbell/emacs/paredit.el'>paredit</a></dt>
    <dd>Paredit auto-balances parentheses and other matched chars to
    make sure you don't end up with structurally invalid
    expressions.</dd> </dl>

  <a name="installation"></a>
  <h3>Installation</h3>

  <p>The easiest way to get started is to grab ELPA. If you
    use <a href='http://github.com/technomancy/emacs-starter-kit'>Emacs
    Starter Kit</a> you've already got ELPA. (If you're new to Emacs,
    you might want to use the Starter Kit anyway as a base for your
    own customizations; also check out
    the <a href='http://peepcode.com/products/meet-emacs'>PeepCode
    screencast</a>.) Use <kbd>M-x package-list-packages</kbd> to pull
    up the package list. Move down to <code>clojure-mode</code> and
    press <kbd>i</kbd> to mark it for installation, then
    press <kbd>x</kbd> to go.</p>

  <p>Once it's installed you should be able to work with .clj files,
    and you may be happy with just this. It has rudimentary subprocess
    support with <kbd>M-x run-lisp</kbd>, which is good enough for
    many, including Rich Hickey, the creator of Clojure. But most of
    us find it much more convenient to be able to interact with an
    actual running Clojure process as you code.</p>

  <p><strike>Pressing <kbd>M-x clojure-install</kbd> will kick off the
    Clojure installation process. Once you choose a download location,
    it will download a number of repositories and compile Clojure
    itself, so it will take a few minutes. (It requires having git,
    Java 1.5+, and ant installed.)  When it's done, it will configure
    SLIME and swank-clojure, and it will give you instructions on a
    few lines to add to your personal config (usually found
    in <code>$HOME/.emacs.d/init.el</code>) so it will work for future
    sessions.</strike> Deprecated in favour
    of <a href="/swank-clojure.html">similar functionality in
    swank-clojure.</p>

  <a name="usage"></a>
  <h3>Usage</h3>

  <p>Hitting <kbd>M-x slime</kbd> will launch a new Clojure session in
    a <code>*slime-repl*</code> buffer. You can also interact with
    the <code>*inferior-lisp*</code> buffer, but the slime-repl buffer provides
    a higher-level interface with a few extra niceties. The REPL
    works as you'd expect, but you can hit <kbd>,</kbd> to activate
    some shortcuts, the most useful being <kbd>i</kbd> to change the
    current namespace (with tab-completion) and <code>restart</code>.</p>

  <p>Back in your .clj buffers, <kbd>C-x C-e</kbd> has been rebound to
    execute the form under the point in Clojure instead of Elisp. This
    is handy, but you won't get accurate line numbers from stack
    traces involving functions loaded this way. Pressing <kbd>C-c
    C-k</kbd> will load the entire file and ensure stack traces come
    through accurately.</p>

  <p>As you type out function calls, you should see their argument
    list show in the minibuffer. This is called <code>eldoc</code>, and
    it's a great way to get a quick refresher about what a function
    expects. For full documentation lookup you'll need to get handy
    with <kbd>C-c C-d d</kbd> though. Finally you can
    use <kbd>M-.</kbd> to jump to the definition of any given
    function.</p>

  <a name="projects"></a>
  <h3>Projects</h3>

  <p>Of course, after a while you'll be done with just playing at the
    REPL and want to hack on a real project. Since the JVM doesn't
    allow you to modify the classpath at runtime, you need to specify
    up front where it should look for code. The simplest thing to do
    is add <code>src/</code>, <code>test/</code>, <code>lib/</code>,
    and <code>classes/</code> (for AOT compilation, if desired)
    directories in your project root to the classpath. Then you place
    your dependency jars in the <code>lib</code> directory. <strike>If
    you've got complicated dependencies, you could
    <a href='http://github.com/dysinger/clojure-pom'>use maven to
    manage them</a>, but if you've only got a couple it's not hard to
    do by hand.</strike>
    Use <a href="http://github.com/technomancy/leiningen">Leiningen</a>
    for dependency management and other build needs.</p>

  <p>This elisp function will prompt for a project root and then
    launch a SLIME session configured with a classpath for that project.</p>

  <pre class="code" style="font-size: 80%;"><span class="esk-paren"><span class="hl-line">(defun clojure-project (path)
  </span></span>  <span class="doc">"Setup classpaths for a clojure project and starts a new SLIME session."</span>
    <span class="esk-paren">(</span>interactive <span class="esk-paren">(</span>list
                  <span class="esk-paren">(</span>ido-read-directory-name
                   <span class="string">"Project root: "</span>
                   <span class="esk-paren">(</span>locate-dominating-file default-directory <span class="string">"pom.xml"</span><span class="esk-paren">))))</span>
    <span class="esk-paren">(</span><span class="keyword">when</span> <span class="esk-paren">(</span>get-buffer <span class="string">"*inferior-lisp*"</span><span class="esk-paren">)</span>
      <span class="esk-paren">(</span>kill-buffer <span class="string">"*inferior-lisp*"</span><span class="esk-paren">))</span>
    <span class="esk-paren">(</span><span class="keyword">defvar</span> <span class="variable-name">swank-clojure-extra-vm-args</span> nil<span class="esk-paren">)</span>
    <span class="esk-paren">(</span><span class="keyword">defvar</span> <span class="variable-name">slime-lisp-implementations</span> nil<span class="esk-paren">)</span>
    <span class="esk-paren">(</span>add-to-list 'swank-clojure-extra-vm-args
                 <span class="esk-paren">(</span>format <span class="string">"-Dclojure.compile.path=%s"</span>
                         <span class="esk-paren">(</span>expand-file-name <span class="string">"target/classes/"</span> path<span class="esk-paren">)))</span>
    <span class="esk-paren">(</span>setq swank-clojure-binary nil
          swank-clojure-jar-path <span class="esk-paren">(</span>expand-file-name <span class="string">"target/dependency/"</span> path<span class="esk-paren">)</span>
          swank-clojure-extra-classpaths
          <span class="esk-paren">(</span>append <span class="esk-paren">(</span>mapcar <span class="esk-paren">(</span><span class="keyword">lambda</span> <span class="esk-paren">(</span>d<span class="esk-paren">)</span> <span class="esk-paren">(</span>expand-file-name d path<span class="esk-paren">))</span>
                          '<span class="esk-paren">(</span><span class="string">"src/"</span> <span class="string">"target/classes/"</span> <span class="string">"test/"</span><span class="esk-paren">))</span>
                  <span class="esk-paren">(</span><span class="keyword">let</span> <span class="esk-paren">((</span>lib <span class="esk-paren">(</span>expand-file-name <span class="string">"lib"</span> path<span class="esk-paren">)))</span>
                    <span class="esk-paren">(</span><span class="keyword">if</span> <span class="esk-paren">(</span>file-exists-p lib<span class="esk-paren">)</span>
                        <span class="esk-paren">(</span>directory-files lib t <span class="string">".jar$"</span><span class="esk-paren">))))</span>
          slime-lisp-implementations
          <span class="esk-paren">(</span>cons `<span class="esk-paren">(</span>clojure ,<span class="esk-paren">(</span>swank-clojure-cmd<span class="esk-paren">)</span> <span class="builtin">:init</span> swank-clojure-init<span class="esk-paren">)</span>
                <span class="esk-paren">(</span>remove-if #'<span class="esk-paren">(</span><span class="keyword">lambda</span> <span class="esk-paren">(</span>x<span class="esk-paren">)</span> <span class="esk-paren">(</span>eq <span class="esk-paren">(</span>car x<span class="esk-paren">)</span> 'clojure<span class="esk-paren">))</span>
                           slime-lisp-implementations<span class="esk-paren">)))</span>
    <span class="esk-paren">(</span><span class="keyword">save-window-excursion</span>
      <span class="esk-paren">(</span>slime<span class="esk-paren">)))</span></pre>

  <p><strike>If you're using the starter kit, you'll already have it
    available. If you're on Emacs 22,
    install <a href="http://github.com/technomancy/emacs-starter-kit/raw/b5d0aa78b87bde5866c4f834c61ecee3d1fdbc0c/dominating-file.el">this
    backported function</a>.</strike></p>

  <p><b>Update</b>: this function has been added to swank-clojure as
  <kbd>M-x swank-clojure-project</kbd>.</p>

  <a name="tests"></a>
  <h3>Tests</h3>

  <p>If you've written automated tests for your project using
    the <code>clojure.test</code> library (which you should), you can
    use <code>clojure-test-mode</code> to run them. Install it
    via <kbd>M-x package-list-packages</kbd>, and then you can
    use <kbd>C-c C-,</kbd> to run the tests in the current
    buffer. Failures and errors get highlighted, so if you want to see
    details about a failure, move the point to the red region and
    press <kbd>C-c C-'</kbd>. Errors that occur <i>loading</i> the
    test will not be shown here; switch to
    the <code>*inferior-lisp*</code> buffer to see them.</p>

  <h3>Happy Hacking</h3>

  <p>I hope this is helpful and clears up some confusion. Now get out
    there and <a href='http://github.com/languages/Clojure'>write some
      code</a>.</p>

  <p><b>Update</b>: Some users are reporting that some ELPA packages
    failed to activate. I believe I've fixed this; do an <kbd>rm -rf
    emacs-starter-kit/elpa/*</kbd> and relaunch Emacs to perform a full
    reinstall of all your ELPA packages. If you're <i>still</i> seeing
    the bug, please leave a comment or an issue on
    the <a href='http://github.com/technomancy/emacs-starter-kit/issues'>github
    project</a>.</p>

  <p><b>Update</b>: If you are using Slime with both Clojure and
    Common Lisp, refer to the instructions
    at <a href='http://felipero.posterous.com/1446961'>http://felipero.posterous.com/1446961</a>.</p>
