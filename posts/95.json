{"timestamp":"Sat Oct 13 00:00:01 -0700 2007","DRAFT":null,"title":"cleaning up ecmascript","id":95,"content":"<p>OK, so I'm writing Javascript at work. It's not too shabby; the\r\n  nonsensical requirement of an explicit return is starting to drive\r\n  me a bit batty, but other quirks can be dealt with. For example,\r\n  let's do something about the ridiculous proliferation of\r\n  the <tt>function<\/tt> keyword. Let's damp the syntactic noise\r\n  required to use closures:<\/p>\r\n\r\n<pre class=\"code\"><span class=\"paren\">(<\/span><span class=\"keyword\">defun<\/span> <span class=\"function-name\">js-lambda<\/span> <span class=\"paren\">()<\/span> <span class=\"paren\">(<\/span>interactive<span class=\"paren\">)<\/span> <span class=\"paren\">(<\/span>insert <span class=\"string\">\"function () {\\n};\"<\/span><span class=\"paren\">)<\/span>\r\n  <span class=\"paren\">(<\/span>backward-char 6<span class=\"paren\">))<\/span>\r\n\r\n<span class=\"paren\">(<\/span><span class=\"keyword\">defun<\/span> <span class=\"function-name\">js-pretty-lambdas<\/span> <span class=\"paren\">()<\/span>\r\n    <span class=\"paren\">(<\/span>font-lock-add-keywords\r\n     nil `<span class=\"paren\">((<\/span><span class=\"string\">\"<\/span><span class=\"string\"><span class=\"regexp-grouping-backslash\">\\\\<\/span><\/span><span class=\"string\"><span class=\"regexp-grouping-construct\">(<\/span><\/span><span class=\"string\">function *<\/span><span class=\"string\"><span class=\"regexp-grouping-backslash\">\\\\<\/span><\/span><span class=\"string\"><span class=\"regexp-grouping-construct\">)<\/span><\/span><span class=\"string\">(\"<\/span>\r\n            <span class=\"paren\">(<\/span>0 <span class=\"paren\">(<\/span><span class=\"keyword\">progn<\/span> <span class=\"paren\">(<\/span>compose-region <span class=\"paren\">(<\/span>match-beginning 1<span class=\"paren\">)<\/span> <span class=\"paren\">(<\/span>match-end 1<span class=\"paren\">)<\/span>\r\n                                      ,<span class=\"paren\">(<\/span>make-char 'greek-iso8859-7 107<span class=\"paren\">))<\/span>\r\n                      nil<span class=\"paren\">))))))<\/span>\r\n\r\n<span class=\"paren\">(<\/span>add-hook 'js-mode-hook 'js-pretty-lambdas<span class=\"paren\">)<\/span>\r\n<span class=\"paren\">(<\/span>define-key js-mode-map <span class=\"paren\">(<\/span>kbd <span class=\"string\">\"C-c l\"<\/span><span class=\"paren\">)<\/span> 'js-lambda<span class=\"paren\">)<\/span><\/pre>\r\n\r\n<p>That means instead of the unsightly <tt>function () {};<\/tt> you\r\n  get the more subtle <tt>&lambda; () { }<\/tt>&mdash;much easier on the\r\n  eyes. Plus you get the <tt>C-c l<\/tt> binding to make up for the\r\n  shortsightedness of keyboard manufacturers in neglecting to include\r\n  a &lambda; key on their products. Drop this in your <tt>.emacs<\/tt> file to let them know who's boss.<\/p>"}
