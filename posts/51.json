{"timestamp": "Sat Oct 13 00:00:01 -0700 2007", "title": "level up", "id": 51, "content": "<p>Ok,  so i've got this theory which I'm sure totally oversimplifies\nthings,  but it may be a good way of thinking about\nprogramming. Basically as I see it there are three different levels\nyou can achieve concerning your ability to write really good code.</p>\n\n<ol>\n  <li>At the first stage you have someone who has learned to write\n    code that\n    doesn't <a href='http: //technomancy.us/blog/post/36'>smell\n    bad</a>. He's got the idea--separate your business logic from your\n    display logic and avoid tight coupling. He may have a lot of old\n    spaghetti code around somewhere which embarrasses him,  but he's\n    learned his lesson. The project he's working on now is going to be\n    done <i>right</i>,  darn it. It's going to be done in a clean\n    fashion,  and its intent is going to be clear from glancing over\n    the code. He can write beautiful code.</li>\n\n  <li>The next stage is the kind of hacker who can not only build the\n    type of system described above,  but can actually maintain and keep\n    it maintainable it over time. Note that these are <i>not</i> the\n    same thing! It's possible to write an app that satisfies the above\n    without knowing anything about refactoring or testing,  but over time\n    the clarity and clean structure of the project are going to\n    degrade. Someone at this level can write code that stays beautiful.\n  </li>\n\n  <li>Finally we have a truly rare breed of programmer. Someone at\n    this level is not only capable of writing beautiful,  maintainable\n    code,  he's capable of writing beautiful code <i>that works with\n    hideously ugly systems</i>. Sadly,  I'm not yet at this level,  and\n    it shows. It's one thing to be able to keep things from getting\n    out of hand when you're working with a system you have control\n    over or a system which is reasonably well-designed. It is quite\n    another to be able to masterfully hide ugliness and poor\n    structure,  keeping your project flexible and clean. This is what a\n    master hacker is capable of.</li>\n\n  <li>...There may be more beyond this; I wouldn't know since I'm\n  somewhere in between levels two and three.</li>\n</ol>\n\n<p>I believe it's difficult to progress to the next stage on your own\n  without first working on a project that fails miserably at it. It's\n  only when you really feel the pain of the limitations of your\n  current style that you get yourself to progress. This has been my\n  experience coding solo. I'm sure a mentorship type of situation\n  could help things,  but I suspect most programmers follow a\n  progression like this. </p>\n"}
