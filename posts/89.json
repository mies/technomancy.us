{"timestamp":"Sat Oct 13 00:00:01 -0700 2007","DRAFT":false,"title":"loads of lisp","id":89,"content":"<p>All righty then. Recent silliness aside, things have been going on\r\n  here. Big things; exciting[<a href='#exciting'>*<\/a>] things.<\/p>\r\n\r\n<ul>\r\n  <li>I've gotten a job\r\n    at <a href='http:\/\/hypertextsolutions.net'>Hypertext Solutions<\/a>,\r\n    who are building a pretty nifty product. It's kind of disorienting\r\n    being dropped into a mostly-Java team since right now I know\r\n    more <a href='http:\/\/en.wikipedia.org\/wiki\/Javanese_language'>Javanese<\/a>\r\n    than Java, but I'm getting up to speed. More and more Ruby is being\r\n    used day-to-day, so I'm finding that as the resident Ruby guru I'm\r\n    being asked almost as many Ruby-related questions as I'm asking\r\n    about crazy stuff like Tomcat and\r\n    (<a href='http:\/\/www.defmacro.org\/ramblings\/lisp.html'>shudder<\/a>)\r\n    Ant.<br \/><br \/><\/li>\r\n\r\n  <li>I've also been recently rethinking the way things have been going\r\n    with <a href='http:\/\/rinari.rubyforge.org'>Rinari<\/a>, the Rails\r\n    environment for Emacs. I had a lot of grand visions shared with\r\n    some <a href='http:\/\/lathi.net'>really<\/a>\r\n    <a href='http:\/\/funkworks.blogspot.com'>great<\/a>\r\n    <a href='http:\/\/platypope.org\/blog'>folks<\/a>, but it seems that\r\n    there just isn't enough energy and effort to keep it alive. It's\r\n    also hard to get traction with new users.<br \/><br \/>\r\n\r\n    Rinari appeals to Emacs veterans because it follows time-honored\r\n    conventions and doesn't... go overboard, but someone new to Rails\r\n    and Emacs is just going to go out there and search for 'Emacs for\r\n    Rails' and come\r\n    across <a href='http:\/\/emacs-rails.rubyforge.org'>rails.el<\/a>\r\n    instead. At first glance it seems more featureful, and newbies\r\n    aren't put off by the ways it deviates from convention; they just\r\n    see a lot of resulting inconsistency in Emacs as a whole as time\r\n    goes on. On top of that, it makes it seem\r\n    like <a href='http:\/\/mmm-mode.sf.net'>mmm-mode<\/a> was the best way\r\n    to support ERB views, which\r\n    is <a href='http:\/\/technomancy.us\/40'>simply not the case<\/a> any\r\n    more.<br \/><br \/>\r\n\r\n    It seems to me that a discouragingly high percentage of rinari users\r\n    have just found about about it because they happened to be asking\r\n    about how to get rails.el working while I was in #emacs, and I was\r\n    able to direct them to Rinari. So: there's a definite mind-share\r\n    problem on top of the \"nobody has time to hack it\"\r\n    problem.<br \/><br \/>\r\n\r\n    Anyway, to make a long story somewhat shorter, I decided that it'd\r\n    be best to join forces with the rails.el team. I contacted them, and\r\n    it turns out I'm really the only one who wants to actively develop\r\n    it right now. So I got added to the committer list and started a\r\n    separate branch to add in all the good Rinari stuff and remove all\r\n    the stuff that IMHO is ill-advised. Key bindings stomp all over the\r\n    place and require finger-contortions that would shoot chills down\r\n    the spine of an ergonomicist.\r\n\r\n    All that is on its way out in my new version, available here:<br \/>\r\n\r\n    <pre class='code'>svn co svn:\/\/rubyforge.org\/emacs-rails\/branches\/rinari-merge<\/pre>\r\n  <\/li>\r\n\r\n  <li>That's not all the Emacs goodness in town; not by a long\r\n    shot. I've been having a lot of fun\r\n    with <a href='http:\/\/dev.technomancy.us\/wiki\/TestUnitMode'>test-unit.el<\/a>.\r\n    The basic idea is that rather than having tests run in a terminal,\r\n    (even a terminal within Emacs) you'd rather have them run in the\r\n    test buffer itself. With test-unit-mode, whenever you save the\r\n    tests, Emacs kicks off a subordinate process that runs them and then\r\n    will highlight the methods in the buffer based on the output. That\r\n    way you're instantly notified of any failure (faster than with\r\n    <a href=''>autotest<\/a> even, though autotest has other advantages\r\n    to be sure), and the feedback loop is as short as possible. <br \/><br \/>\r\n\r\n    There are still a few issues to work out. The trickiest thing is\r\n    figuring out a heuristic for when to run which tests. This is a\r\n    problem that autotest has more or less solved, so the thing to do\r\n    could be to make test-unit-mode a frontend for autotest but use\r\n    save-hooks to kick off autotest rather than polling directories\r\n    every five seconds and have stuff highlighted if the buffer's open\r\n    rather than just dumping output to the shell. I definitely have\r\n    plenty more to do in this direction.<br \/><br \/>\r\n  <\/li>\r\n\r\n  <li>On a similar note, Ryan Davis\r\n    of <a href='http:\/\/zenspider.com\/seattle.rb'>Seattle.rb<\/a> just\r\n    released <a href='http:\/\/ruby.sadi.st'>flog<\/a>, a tool that\r\n    analyzes the parse tree to let you know how much pain your code is\r\n    in. Clearly this kind of information is also very useful to see live\r\n    in your buffers to minimize breaks in your workflow, so I'm working\r\n    on another <a href='http:\/\/dev.technomancy.us\/wiki\/Flog'>library<\/a>\r\n    called flog.el that shows you the pain levels for your methods as\r\n    you code them. Again there is room for improvements due to the fact\r\n    that what I've got so far works only on a buffer-level rather than a\r\n    project level, but it's definitely a start.<\/li>\r\n<\/ul>\r\n\r\n<p>It's pretty cool to be up in the Northwest enjoying the greenery\r\n  and the second-best city in the US for software work. Doesn't hurt\r\n  that it's also the home of the most badass Ruby\r\n  Brigade[<a href='#per-capita'>**<\/a>] in the country as well.<\/a>\r\n\r\n<p>* <a name='exciting'><\/a>For some value of \"exciting\".<\/p>\r\n<p>** <a name='per-capita'><\/a>Per capita.<\/p>\r\n"}
