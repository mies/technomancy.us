{"timestamp":"Sun Dec 09 07:23:42 -0800 2007","DRAFT":null,"title":"bus scheme","id":98,"content":"<p>So during RubyConf, Matz asked how many in the audience had written\r\n  a Lisp implementation. It was pretty impressive&mdash;somewhere\r\n  between five and ten percent of the crowd raised their\r\n  hands. Unfortunately I was not one of them, to my great shame.<\/p>\r\n\r\n<p>Anyway, I figured it was about time to fix that. I've been coding\r\n  up a little interpreter on my bus rides to work. Bus Scheme it is\r\n  called, and it's implemented in Ruby. (I seriously considered doing\r\n  it in Emacs Lisp, but I've been writing plenty of that these days,\r\n  and I actually haven't been touching Ruby a lot.)  Anyway, it's a\r\n  lot of fun. I was thrashing about blindly with the parser for a\r\n  while, but once I discovered the proper way of separating the\r\n  parsing step from the tokenizing step (thanks Ryan! I did learn this\r\n  in school once; I promise...) it all fell into place with a bit of\r\n  recursion.<\/p>\r\n\r\n<pre class=\"code\">\r\n> (+ 2 2)\r\n4\r\n> (define fives (quote 5 5))\r\n5\r\n5\r\n> fives\r\n5\r\n5\r\n> (concat \"foo\" \"bar\")\r\nfoobar\r\n<\/pre>\r\n\r\n<p>Right now it's just good for simple arithmetic,\r\n  basic <code>define<\/code>s, and a few primitives, but I should be\r\n  getting to <code>lambda<\/code> next. I think I'll need to read a\r\n  little further in <i>The Little Schemer<\/i> before I'm ready to\r\n  tackle that, though.<\/p>\r\n\r\n<p><a href='http:\/\/technomancy.us\/static\/code\/bus_scheme.tar'>Code is\r\n  up as a tarball<\/a>. I haven't figured out where to host the git\r\n  repository yet. I'm really enjoying the exercise and would recommend\r\n  it to like-minded hackers. Bonus fact: I haven't actually used a\r\n  real Scheme yet. Everything I know about it I've gathered from\r\n  reading <i>The Little Schemer<\/i>, watching\r\n  the <a href=\"http:\/\/www.swiss.ai.mit.edu\/classes\/6.001\/abelson-sussman-lectures\/\">Structure\r\n  and Interpretation of Computer Programs videos<\/a>, and reading lots\r\n  about Common Lisp and Emacs Lisp&mdash;all of which I can't recommend\r\n  highly enough.<\/p>\r\n\r\n<p>In closing: <a href=\"http:\/\/rubyconf2007.confreaks.com\/d2t1p5_tightening_the_feedback_loop.html\">the\r\n  video of my RubyConf talk<\/a> has been posted by ConFreaks. Much\r\n  thanks to them for taping the conference. There are also a ton of\r\n  other good videos posted there, though not every talk is up\r\n  yet. Dig in!<\/p>"}
