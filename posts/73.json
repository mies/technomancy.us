{"timestamp":"Sat Oct 13 00:00:01 -0700 2007","title":"30 plus bad","id":73,"content":"\n<p><a href=\"http:\/\/behaviour-driven.org\">Behaviour-Driven\nDevelopment<\/a> has been percolating around in the collective\nconsciousnesses of some of the communities I'm involved in. It's\nbasically a methodology that has grown out of some of the weaknesses\npeople have observed in test-driven development. Here's the thing:\nTDD is about design. Forcing yourself to think about tests before\nthe code is actually written helps you think about design in new\nways. Beginners to TDD often think it's all about the tests instead.<\/p>\n\n<p>The main issue that BDD tackles is one of terminology&mdash;when\nyou are constantly referring to tests in TDD, it's easy to forget\nthat what you really care about is behaviour. It's not <i>really<\/i>\nabout tests, (in fact, <a href=\"http:\/\/blog.daveastels.com\">Dave\nAstels's<\/a> book on TDD begins with the sentence, \"This is not a\nbook about testing.\")  those just happen to be the most obvious way\nto get check behaviour. So BDD tries to come in with a new\nvocabulary focusing on contexts and specifications and the word\n\"should\" that starts you off thinking in the right direction.<\/p>\n\n<p>The common criticism here is that it's \"just terminology\". It's\nnot really that revolutionary, it's just a new set of names. Now to\nbe honest, I agree with that except for the word just. When people\ntalk about coding styles and things to always be mindful of, one of\nthe things that repeatedly comes up\nis <a href=\"http:\/\/cc2e.com\/Page.aspx?hid=225\">how important good\nnames are<\/a>. Not to get\nall <a\nhref=\"http:\/\/en.wikipedia.org\/wiki\/Sapir-Whorf_hypothesis\">Sapir-Whorf<\/a>\non you, but the words you use really affect the way you think in an\ninescapable way. In fact, there's an\nexcellent <a\nhref=\"http:\/\/deadhobosociety.com\/index.php\/Essays\/ESSAY12\">essay on\nConfucianism and Technical standards<\/a> which states:<\/p> <blockquote>\nIn a famous\npassage, <a\nhref=\"http:\/\/www.analects-ink.com\/mission\/Confucius_Rectification.html\">Analects\n13.3<\/a>, Confucius was asked by a disciple what his first order of\nbusiness would be if he were to govern a state. He replied,\n&#27491;&#21517;, meaning roughly [...] \"rectify the names.\" His disciple\nwas somewhat incredulous and asked, \"Would you be as impractical as\nthat?\" Confucius strongly rebuked his disciple and explained that\nproper nomenclature is the basis of language and that language is\ncentral to taking care of things.<\/blockquote>\n\n<p>In the words of the Master:<\/p>\n\n<blockquote>If language is not correct, then what is said is not what\nis meant; if what is said is not what is meant, then what must be\ndone remains undone; if this remains undone, morals and art will\ndeteriorate; if justice goes astray, the people will stand about in\nhelpless confusion. Hence there must be no arbitrariness in what is\nsaid. This matters above everything.<\/blockquote>\n\n<p>All that to say: yes, BDD is (mostly) new words. But that's a big\ndeal.<\/p>\n\n<p>Oh yes; the point... I had one about here\nsomewhere. Right&mdash;<tt>behave.el<\/tt>, my latest hackery:<\/p>\n\n<pre class=\"code\">\n<span class=\"paren\">(<\/span>context <span class=\"string\">\"A list with three items\"<\/span>\n       <span class=\"paren\">(<\/span>tag list example<span class=\"paren\">)<\/span>\n       <span class=\"paren\">(<\/span><span class=\"keyword\">lexical-let<\/span> <span class=\"paren\">((<\/span>list <span class=\"paren\">(<\/span>list <span class=\"string\">\"a\"<\/span> <span class=\"string\">\"b\"<\/span> <span class=\"string\">\"c\"<\/span><span class=\"paren\">)))<\/span>\n\n         <span class=\"paren\">(<\/span>specify <span class=\"string\">\"should contain the first item\"<\/span>\n                  <span class=\"paren\">(<\/span>expect <span class=\"paren\">(<\/span>first list<span class=\"paren\">)<\/span> equal <span class=\"string\">\"a\"<\/span><span class=\"paren\">))<\/span>\n\n         <span class=\"paren\">(<\/span>specify <span class=\"string\">\"should push new values onto the front\"<\/span>\n                  <span class=\"paren\">(<\/span>push <span class=\"string\">\"d\"<\/span> list<span class=\"paren\">)<\/span>\n                  <span class=\"paren\">(<\/span>expect <span class=\"paren\">(<\/span>first list<span class=\"paren\">)<\/span> equal <span class=\"string\">\"d\"<\/span><span class=\"paren\">))<\/span>\n\n         <span class=\"paren\">(<\/span>specify <span class=\"string\">\"should NOT remove the top item when reading the car\"<\/span>\n                  <span class=\"paren\">(<\/span>expect <span class=\"paren\">(<\/span>first list<span class=\"paren\">)<\/span> equal <span class=\"string\">\"d\"<\/span><span class=\"paren\">)<\/span>\n                  <span class=\"paren\">(<\/span>expect <span class=\"paren\">(<\/span>first list<span class=\"paren\">)<\/span> equal <span class=\"string\">\"d\"<\/span><span class=\"paren\">))<\/span>\n\n         <span class=\"paren\">(<\/span>specify <span class=\"string\">\"should return the top item when popped\"<\/span>\n                  <span class=\"paren\">(<\/span>expect <span class=\"paren\">(<\/span>pop list<span class=\"paren\">)<\/span> equal <span class=\"string\">\"d\"<\/span><span class=\"paren\">))<\/span>\n\n         <span class=\"paren\">(<\/span>specify <span class=\"string\">\"should remove the top item when popped\"<\/span> \n                  <span class=\"paren\">(<\/span>expect <span class=\"paren\">(<\/span>pop list<span class=\"paren\">)<\/span> equal <span class=\"string\">\"a\"<\/span><span class=\"paren\">)<\/span>\n                  <span class=\"paren\">(<\/span>expect <span class=\"paren\">(<\/span>pop list<span class=\"paren\">)<\/span> equal <span class=\"string\">\"b\"<\/span><span class=\"paren\">))))<\/span><\/pre><p>It's BDD. In Emacs Lisp. (And it's only 89 lines of code.&lt;\/brag&gt;)<\/p>\n<p>The most obvious difference it has from other libraries\nlike <a href=\"http:\/\/rspec.rubyforge.org\">RSpec<\/a> (well, apart from\nLisp) is that behave.el meant to run in an interactive environment\nrather than from the command line. You could certainly script it, but\nthe tagging functionality is designed with interactivity in mind. The\nother thing is that you can't structure things in terms of \"X should\nPREDICATE Y\" since Lisp requires that the function go first. I suppose\ntechnically you could write a macro that would mangle things to the\npoint where that would be feasible, but it definitely goes against the\ngrain of Lisp and would require a lot of context\nswitching. <tt>behave.el<\/tt> instead uses the expect macro to state\nexpectations which the code should fulfill.<\/p>\n\n<p>Being a first release, it's missing a few things. For starters, you\ncan only <tt>expect<\/tt> either that a form is non-nil or that it is\nequal something. More flexibility in the expect macro is certainly to\nbe desired. The other big thing is that each <tt>specify<\/tt> form\ndoes not start with a fresh binding of variables. (The <tt>setup<\/tt>\nmethods in both Ruby's Test::Unit and rSpec both provide this, and it\noften proves to be handy.) I've been battling the CL-emulation\nlibraries in elisp and so far losing, but I'm sure I can provide such\na thing in a future release.<\/p>\n\n<p><tt>behave.el<\/tt>\nsupercedes <a\nhref=\"http:\/\/dev.technomancy.us\/phil\/wiki\/ElUnit\">ElUnit<\/a>, my\nprevious unit-testing framework for Emacs Lisp.<\/p>\n\n<p>Anyway, real point here is that now that I've got a BDD framework\nin Emacs Lisp, I can port it to Common Lisp and then use it to hack\non <a href=\"http:\/\/technomancy.us\/blog\/post\/72\">Darjeeling<\/a>. Woo hoo!<\/p>\n\n<p><a href=\"http:\/\/dev.technomancy.us\/phil\/browser\/dotfiles\/.emacs.d\/behave\">Grab it<\/a>\nfrom my repository. There's also\na <a\nhref=\"http:\/\/dev.technomancy.us\/phil\/wiki\/behave\">Trac page<\/a>.<\/p>\n\n"}
