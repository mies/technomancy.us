{"timestamp": "Sat Oct 13 00:00:01 -0700 2007", "title": "fletter", "id": 94, "content": "<p>
  One of the handy things about Lisp that I've gotten attached to is
  the <tt>flet</tt> function. Using it you can temporarily redefine a
  function but have its definition revert back to the original when
  its body exits. This is analagous to the way a block in Ruby can
  have some specific behaviour that goes away when it exits, 
  but <tt>flet</tt> doesn't seem to have a Ruby equivalent. (The
  best my searches found was pstickne enlightening folks in
  #ruby-lang about this lisptastic functionality.) Anyway,  I just figured out an implementation.
</p>

<pre class=\"code\">
<span class=\"keyword\">def</span> <span class=\"function-name\">Object.flet</span>(bindings,  &amp;block)\n
  old_methods = {}\n

  bindings.each <span class=\"keyword\">do</span> |the_method,  body|\n
    old_methods[the_method] = method(the_method)\n
    define_method(the_method,  body)\n
  <span class=\"keyword\">end</span>\n
  \n
  <span class=\"keyword\">begin</span>\n
    block.call\n
  <span class=\"keyword\">ensure</span>\n
    bindings.each <span class=\"keyword\">do</span> |the_method,  body|\n
      define_method(the_method) { |*args| old_methods[the_method].call(*args) }\n
    <span class=\"keyword\">end</span>\n
  <span class=\"keyword\">end</span>\n
<span class=\"keyword\">end</span>\n
</pre>

<p>This lets you do stuff like: </p>

<pre class=\"code\">
puts <span class=\"string\">\"foo\"</span>\n
\n
<span class=\"type\">Object</span>.flet(<span class=\"constant\">: puts</span> =&gt; &lambda; { |str| print <span class=\"string\">\"</span><span class=\"variable-name\">#{str.reverse}</span><span class=\"string\">\n
\"</span> }) <span class=\"keyword\">do</span>\n
  puts <span class=\"string\">\"foo\"</span>\n
<span class=\"keyword\">end</span>\n
\n
puts <span class=\"string\">\"foo\"</span>\n
</pre>

<p>... which will output: </p>

<pre class=\"code\">foo\n
oof\n
foo\n</pre>

<p>Pretty cool,  huh? I haven't done much funky metaprogramming in
  Ruby,  so it's quite possible my attempts to Lispify it here are
  dangerous and/or misguided. (That's what comments are for,  BTW.) But
  it's coming in pretty handy for me so far.</p>

<p><b>Update</b>:  <a href='http://blog.hasmanythrough.com'>Josh</a>
  points out that this is not thread-safe and thoroughly violates
  encapsulation in a way that should earn me a severe thrashing (dare I say&mdash;flogging?) were I
  to use it in production in anything but the simplest of circumstances. In my mind
  it's kind of like using <tt>eval</tt>:  all advice concerning
  actually using it goes along the lines of \"never do this\". Only once
  you learn when it's OK to ignore such strong warnings can you be
  trusted to posess the necessary discretion to use it in
  practice.</p>

<p>The context here is that I want to run a bunch of tests and gather
  failure data within my library. But when I require <tt>test/unit</tt>,  it sets up an
  <a href=\"http://www.ruby-doc.org/core/classes/Kernel.html#M005957\">at_exit</a>
  block that actually initiates the running of the tests as a final act before the execution finishes. This is
  redundant since I already initiated them myself in the library. But
  once you've created an <tt>at_exit</tt>,  there's no mechanism for
  disabling it. I could just redefine <tt>at_exit</tt> permanently, 
  but it's quite possible I'd want to use it elsewhere. <tt>flet</tt>
  allows me to limit the scope of this change. But it's only
  forgivable because I'm not really working with an object-oriented
  phenomenon here; I'm working with a lower-level feature of Ruby.</p>

<pre class=\"code\">
<span class=\"type\">Object</span>.flet(<span class=\"constant\">: at_exit</span> =&gt; lambda {}) <span class=\"keyword\">do</span>\n
  <span class=\"comment-delimiter\"># </span><span class=\"comment\">keep test/unit's at_exit block from running</span>\n
  require <span class=\"string\">'test/unit'</span>\n
<span class=\"keyword\">end</span>\n
</pre>

<p>And as Josh notes,  Rubinius will make stuff like this much easier. I imagine I wouldn't even have to resort to <tt>flet</tt> to get around my <tt>at_exit</tt> problem.</p>", "tags": "ruby"}
