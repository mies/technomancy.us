--- 
- uri: www.codesounding.org
  timestamp: Thu Sep 29 09:31:42 -0700 2011
  author: robermann
  human: human
  content: |-
    I followed your steps and installed Emacs 24 + clojure-mode on Windows 7, with a little hack. Here my installation's notes, maybe someone else could find this helpful: https://sourceforge.net/apps/wordpress/codesounding/2011/09/29/installing-emacs-24-and-clojure-mode-on-windows-7-step-by-step/
    
    (Sorry if I'm re-posting twice this message, but just now I noted the question &quot;Are you a human or a bot?&quot; - not sure of the answer, but I'll try it :-))
- uri: puuhonua.org/touch
  human: a human
  author: Touch Puuhonua
  timestamp: Thu Sep 29 13:28:22 -0700 2011
  content: |-
    I'm running emacs 24.0.90.1
    
    When I run your code snippet:
    
      (require 'package)
      (add-to-list 'package-archives
                 '(&quot;marmalade&quot; . &quot;http://marmalade-repo.org/packages/&quot;))
      (package-initialize)
    
    I get:
    
      Symbol's value as variable is void: package-archives
- uri: ""
  timestamp: Thu Sep 29 16:08:21 -0700 2011
  author: ptc
  human: human
  content: Cool! I really enjoy the work you've done on this. I'm going to have to upgrade soon. Maybe I'll try to contribute back into the python stuff.
- uri: http://technomancy.us
  human: human
  author: Phil
  timestamp: Thu Sep 29 21:04:08 -0700 2011
  content: "Touch Puuhonua: You must have an old version of package.el from tromey.com somewhere on your load path. If you remove it, you should start using the built-in one."
- uri: ""
  timestamp: Fri Sep 30 00:52:01 -0700 2011
  author: Josh
  human: human
  content: |-
    Just upgraded to emacs 24 w/ starter-kit 2.0.2. I'm a little confused as to the point of &lt;user&gt;.el now. In v1 of the starter-kit, it called package-initialize then &lt;user&gt;.el, so you had all the elpa packages on the load path and could require them. This doesn't work with v2. If I call package-initialize in init.el as suggested above, this will load the installed elpa packages, one of which is the starter-kit, which calls &lt;user&gt;.el - but that this point there are (may be) other packages that haven't yet been added to the load-path as package-initialize hasn't finished loaded all packages yet. So in &lt;user&gt;.el you can't require some packages. You'd need to add them to the load path first, which is somewhat redundant as package-initialize does this for us. I'm got around this issue right now by moving all my old v1 &lt;user&gt;.el code in to init.el after package-initialize has returned. 
    
    So I don't understand what should go in &lt;user&gt;.el now....? Or have I misunderstood something? This affects the upgrade details on the github site. You can't simply move &lt;user&gt;.el and user folder across. I might all work, depending on what's in &lt;user&gt;.el, but it may not also.
    
    Tbanks for the great packages!
- uri: http://kencausey.com/
  human: human
  author: Ken Causey
  timestamp: Fri Sep 30 13:27:56 -0700 2011
  content: |-
    Your my-packages list includes scpaste twice.
    
    Also,  wouldn't paredit be a good inclusion?
- uri: ""
  timestamp: Mon Oct 03 00:36:38 -0700 2011
  author: Konrad Hinsen
  human: human
  content: This looks fine, but I have an issue with the interaction of starter-kit and the package manager. All my initialization files (in the user directory) are processed during the activation of the starter-kit package. Which means that I can't refer to packages that have not been loaded and activated before. But it seems that I can't control the order of package activation either, so I am stuck. Is there any way to make sure that starter-kit is activated last? Or at least have my initialization files run after all packages are there?
- uri: http://technomancy.us
  human: human
  author: Phil
  timestamp: Mon Oct 03 14:14:30 -0700 2011
  content: |-
    Josh, Konrad: yes, one of the side-effects of moving the Starter Kit to a package is that the load order gets shifted around. The good news is that user.el is a lot less important than it was under v1 since you can edit init.el directly. But there are limitations. I recommend setting up eval-after-load blocks in user.el if you need to run code that depends on a package.
    
    Ken: good catch, thanks. Paredit isn't explicitly listed because the Starter Kit pulls it in.
- uri: http://kencausey.com/
  timestamp: Tue Oct 04 07:45:37 -0700 2011
  author: Ken Causey
  human: human
  content: "Phil: Oops, I didn't consider that starter-kit might be loading other packages, now I have some duplication in my packages list. ;)"
- uri: ""
  human: human
  author: Konrad Hinsen
  timestamp: Tue Oct 04 13:23:32 -0700 2011
  content: |
    Thanks Phil, that got me a bit further. But eval-after-load is not a universal solution, unless I am overlooking something.
    
    My concrete example is Python mode configuration. I load python-mode and ipython from the marmelade repo. My configuration file in .emacs.d/&lt;user&gt; needs both of these to be available. But initializing package ipython doesn't load ipython.el, it just puts it on the load path. If I use eval-after-load on ipython, my configuration code never runs. In fact, it is my configuration file that used to contain the (require 'ipython) that triggers the load.
    
    What I'd need is either a way to run code after package X has been initialized (which doesn't imply that any file has been loaded), or a way to initialize package X from inside my configuration file.
    
    Alternatively, would it be possible to provide a function in the starter kit that runs all the user and machine specific configuration files? I'd then call that explicitly at the end of my init.el and everything should work like before.

- uri: ""
  timestamp: Sun Oct 23 13:56:51 -0700 2011
  author: Russ
  human: human
  content: |-
    I got it working, but there are a bunch of stuff that is missing now.  How do I get back the functionality that was in 1.x?
    
    Since I'm still somewhat new to this, I don't really have any idea of what functionality came from where.  I just know that I liked most of the way stuff worked in 1.x.  Is there a way to find out what functionality came from where?
    
    An example:  Before, Ctrl-Home and Ctrl-End would move the cursor to the beginning or end of the buffer.  Now it doesn't.  I have starter-kit-bindings installed, but it didn't help, so now I don't know what to do.
- uri: http://technomancy.us
  human: human
  author: Phil
  timestamp: Wed Oct 26 22:04:31 -0700 2011
  content: |-
    Russ: if you have bindings you like from version 1 you can just copy them from <a href="https://github.com/technomancy/emacs-starter-kit/blob/master/starter-kit-bindings.el">starter-kit-bindings.el</a> into your init.el. Though I'm not sure where C-home/end comes from. I recommend using M-&lt; and M-&gt; instead.
    
    Konrad: If it's something that explicitly needs to happen on a per-user basis you could just construct your own hook:
    
    <pre class="code">(add-hook 'konrad-hook (lambda () (python-init))) ; in user.el
    (run-hooks 'konrad-hook) ; at the bottom of init.el</pre>
    
    Hooks are pretty lightweight and easy to set up for things like that. It may be possible to initialize packages in an ad-hoc manner, but I don't know how that works off the top of my head.
