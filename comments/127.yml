---
- timestamp: Sun Jun 07 21:49:06 -0700 2009
  uri: ""
  author: Rose
  content: Three reasons to have TDD may not apply to his work yet:<br /><br />1. He hasn't had to go back and change code that he hasn't looked at for a long time.<br /><br />2. He hasn't gotten to the point where he wants to refactor a lot of code quickly.<br /><br />3. He hasn't handed off any of his code to a team of other programmers to maintain.<br /><br />Commercial and open-source projects eventually reach those points, and when they do having those tests is valuable.<br />
- timestamp: Fri Jul 10 13:10:59 -0700 2009
  uri: http://davidhilton.wordpress.com
  author: David
  content: |-
    The reasoning for not writing tests seems fairly reasonable.  To sum it up:
    
    1. Complexity leads to bugs 
      (obviously, as the simplest problems are the easiest to solve)
    2. Programming paradigms directly affect complexity
      (why don't we use gotos?)
    3. Functional programs have no state, so side effects are avoided
      (hence reducing complexity)
    
    Because side effects are avoided, if code works, it should work under all conditions.  Any breakage not detected by the community tests will be discovered quite soon by the active community.
    
    I personally am not convinced that functional programming eliminates the need for tests, but I can see that it should reduce the amount of complex and hard to find and fix bugs, and I do not disagree with Rich's decision to not write tests.
