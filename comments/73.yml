--- 
- timestamp: "Sat Jun 30 10: 22: 23 -0700 2007"
  uri: ""
  author: elisp newbie
  content: "Thank you for writing behave.el.  I plan to download and study/use it.\r<br /> \r<br /> Your links to behave.el,  both at this web page and at &lt;http://technomancy.us/72&gt;,  are not working for me.  The following appears to be the correct link: \r<br /> \r<br /> http://dev.technomancy.us/index.cgi/browser/dotfiles/.emacs.d/behave\r<br /> \r<br /> P.S.,  Does technomancy.us not support spell checking,  or is that considered to be too distracting due to the number of jargon terms?\r<br /> "
- timestamp: "Tue Apr 03 11: 16: 43 -0700 2007"
  uri: ""
  author: Matt Scilipoti
  content: |-
    <p>A possible marriage of the two concepts: </p>
    
    <p>I wish my <span class='caps'>IDE</span> had two formats for visualizing a class; one with just the code and another including the <span class='caps'>BDD</span> specifications referencing the class().  There are times when a format like the doctests is  helpful (i.e. learning about the class,  reviewing <span class='caps'>ALL</span> the specs relating to this class).  But,  if the specs were visible all the time,  it would just distract from the solution to the domain problem.  That would be <span class='caps'>BAD</span>.</p>
    
    <p>(</strong>) Since specifications for a particular class are often spread across many contexts,  I would like it to gather the specifications in which this class is referenced outside of a mock/stub.</p>
- timestamp: "Tue Feb 06 08: 37: 03 -0800 2007"
  uri: http://technomancy.us
  author: Phil
  content: |-
    <p>Ian:  that&#8217;s a pretty cool hack. Seriously. It looks to be very idiomatic Python.</p>
    
    <p>However,  when you say,  &#8220;the technique is applicable to any scripting-style language&#8221; I think you&#8217;re failing to see the point of what&#8217;s written here. The Python doctests use code embedded in strings (data) to specify behaviour,  and that&#8217;s fine. However,  doing that in Lisp would feel clunky because Lisp doesn&#8217;t enforce a strict separation of code and data. Lisp encourages you to cross that line. You might even say it&#8217;s the whole point of using Lisp. If something is code,  express it in code; don&#8217;t hide it in a string.</p>
    
    <p>(Also:  calling a technique that uses string-eval more elegant than a solution involving macros is highly suspect.)</p>
    
    <p>Finally:  documentation-driven testing just <em>sounds wrong</em>. The article above makes the case that the names you use have a significant impact on how you go about your work. When you&#8217;re writing code,  you care about how it <em>behaves</em>. Like it or not,  how it is documented is entirely orthogonal to whether it functions correctly or not.</p>
    
    <p>Still,  I&#8217;d say it&#8217;s a nifty technique if you&#8217;re using Python and don&#8217;t have the benifit of code-is-data. It could even be a nice solution in Ruby,  although RSpec has an intelligent use of blocks and has the advantage of treating code as code rather than as strings.</p>
- timestamp: "Mon Apr 09 09: 56: 19 -0700 2007"
  uri: http://technomancy.us
  author: Phil
  content: <p>Well despite the formatting woes,  I think you got the point across. An interesting idea; I&#8217;ll think about how to integrate it.</p>
- timestamp: "Mon Feb 05 19: 01: 23 -0800 2007"
  uri: http://blog.ianbicking.org
  author: Ian Bicking
  content: |-
    <p>Anyone looking at the nonsense <span class='caps'>BDD</span>/RSpec implementations out there really <strong>must</strong> do themselves a favor and look at <a href='http://python.org/doc/current/lib/module-doctest.html'>Python doctests</a></p>
    
    <p>It does everything <span class='caps'>BDD</span>/RSpec/whatever systems do,  but in a far more elegant manner.  And the technique is applicable to any scripting-style language (Ruby and elisp included).  And the implementation should be simple.</p>
    
    <p>I&#8217;d call doctest-style tests &#8220;document driven testing&#8221; (slightly higher level than <span class='caps'>BDD</span>,  as it emphasizes intention and narratives),  or &#8220;functionally driven testing&#8221;,  which is like <span class='caps'>BDD</span>,  but uses the existing term &#8220;functional tests&#8221;.  And really that&#8217;s all this is&#8212;writing functional tests up front instead of unit/programmer tests.  There&#8217;s nothing very magic or new about it,  except the practice itself if you haven&#8217;t used it before.  And,  language and implementation aside,  doing functional tests before implementation is a great way to program.</p>
