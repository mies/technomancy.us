[{"timestamp": "Fri Jan 26 14:15:36 -0800 2007", "uri": "http://technomancy.us", "author": "Phil", "content": "\u003Cp\u003EEvan: I\u0026#8217;ve looked at that; yeah. It looks really cool, but it seems to mostly be cosmetic; it doesn\u0026#8217;t support any of the cool Lispy things that Ruby lacks.\u003C/p\u003E\n\n\n\t\u003Cp\u003EThat\u0026#8217;s basically the converse of what I\u0026#8217;m trying to do. I\u0026#8217;d like to leverage the years and years of head start that Lisp has had in the compiler arena and put a more easily-grokkable Rubylicious face on it. Obviously to support things like macros, the dialect will have to be a superset of Ruby, but that\u0026#8217;s getting ahead of myself.\u003C/p\u003E\n\n\n\t\u003Cp\u003EGah! No \u003Cem\u003Efancy\u003C/em\u003E stuff?! Will remedy immediately.\u003C/p\u003E"},{"timestamp": "Fri Jan 26 13:31:38 -0800 2007", "uri": "http://blog.evanweaver.com", "author": "evan", "content": "\u003Cp\u003EHave you looked at \u003Ca href=\"http://zabor.org/taw/rlisp/\"\u003ERLisp\u003C/a\u003E?\u003C/p\u003E\n\n\n\t\u003Cp\u003EIt runs its interpreter on top of the CRuby interpreter, so all the Ruby object stuff gets tossed right to real Ruby.\u003C/p\u003E"},{"timestamp": "Fri Jan 26 13:32:27 -0800 2007", "uri": "http://blog.evanweaver.com", "author": "evan", "content": "\u003Cp\u003E\u0026#8220;You can do fancy stuff with your comment.\u0026#8221;\u003C/p\u003E\n\n\n\t\u003Cp\u003ELies!\u003C/p\u003E"},{"timestamp": "Tue Jan 30 22:11:59 -0800 2007", "uri": "http://common-lisp.net/project/clpython", "author": "Willem", "content": "\u003Cp\u003EWriting in Common Lisp a compiler with full Ruby language semantics is quite some work.\u003C/p\u003E\n\n\n\t\u003Cp\u003EI did it for Ruby\u0026#8217;s neighbour Python (project CLPython). Language-wise, Python is a subset of CL, in the sense that a big part of the effort is \u0026#8220;connecting dots\u0026#8221; between the two. Conceptually easy, just a lot of work :)\u003C/p\u003E\n\n\n\t\u003Cp\u003EI think a CL compiler for Ruby will require similar effort.\u003C/p\u003E"}]
